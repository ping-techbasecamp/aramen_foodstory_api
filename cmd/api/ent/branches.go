// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aramen-api/cmd/api/ent/branches"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Branches is the model entity for the Branches schema.
type Branches struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ShortDescription holds the value of the "short_description" field.
	ShortDescription string `json:"short_description,omitempty"`
	// FullDescription holds the value of the "full_description" field.
	FullDescription string `json:"full_description,omitempty"`
	// Telephone holds the value of the "telephone" field.
	Telephone string `json:"telephone,omitempty"`
	// Latitude holds the value of the "latitude" field.
	Latitude int `json:"latitude,omitempty"`
	// Longitude holds the value of the "longitude" field.
	Longitude int `json:"longitude,omitempty"`
	// GooleMapURL holds the value of the "goole_map_url" field.
	GooleMapURL string `json:"goole_map_url,omitempty"`
	// DineIn holds the value of the "dine_in" field.
	DineIn bool `json:"dine_in,omitempty"`
	// Delivery holds the value of the "delivery" field.
	Delivery bool `json:"delivery,omitempty"`
	// TakeAway holds the value of the "take_away" field.
	TakeAway bool `json:"take_away,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Branches) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case branches.FieldDineIn, branches.FieldDelivery, branches.FieldTakeAway:
			values[i] = new(sql.NullBool)
		case branches.FieldID, branches.FieldLatitude, branches.FieldLongitude:
			values[i] = new(sql.NullInt64)
		case branches.FieldName, branches.FieldShortDescription, branches.FieldFullDescription, branches.FieldTelephone, branches.FieldGooleMapURL:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Branches", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Branches fields.
func (b *Branches) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case branches.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case branches.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case branches.FieldShortDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short_description", values[i])
			} else if value.Valid {
				b.ShortDescription = value.String
			}
		case branches.FieldFullDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_description", values[i])
			} else if value.Valid {
				b.FullDescription = value.String
			}
		case branches.FieldTelephone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field telephone", values[i])
			} else if value.Valid {
				b.Telephone = value.String
			}
		case branches.FieldLatitude:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				b.Latitude = int(value.Int64)
			}
		case branches.FieldLongitude:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				b.Longitude = int(value.Int64)
			}
		case branches.FieldGooleMapURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field goole_map_url", values[i])
			} else if value.Valid {
				b.GooleMapURL = value.String
			}
		case branches.FieldDineIn:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field dine_in", values[i])
			} else if value.Valid {
				b.DineIn = value.Bool
			}
		case branches.FieldDelivery:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field delivery", values[i])
			} else if value.Valid {
				b.Delivery = value.Bool
			}
		case branches.FieldTakeAway:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field take_away", values[i])
			} else if value.Valid {
				b.TakeAway = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Branches.
// Note that you need to call Branches.Unwrap() before calling this method if this Branches
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Branches) Update() *BranchesUpdateOne {
	return (&BranchesClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Branches entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Branches) Unwrap() *Branches {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Branches is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Branches) String() string {
	var builder strings.Builder
	builder.WriteString("Branches(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("name=")
	builder.WriteString(b.Name)
	builder.WriteString(", ")
	builder.WriteString("short_description=")
	builder.WriteString(b.ShortDescription)
	builder.WriteString(", ")
	builder.WriteString("full_description=")
	builder.WriteString(b.FullDescription)
	builder.WriteString(", ")
	builder.WriteString("telephone=")
	builder.WriteString(b.Telephone)
	builder.WriteString(", ")
	builder.WriteString("latitude=")
	builder.WriteString(fmt.Sprintf("%v", b.Latitude))
	builder.WriteString(", ")
	builder.WriteString("longitude=")
	builder.WriteString(fmt.Sprintf("%v", b.Longitude))
	builder.WriteString(", ")
	builder.WriteString("goole_map_url=")
	builder.WriteString(b.GooleMapURL)
	builder.WriteString(", ")
	builder.WriteString("dine_in=")
	builder.WriteString(fmt.Sprintf("%v", b.DineIn))
	builder.WriteString(", ")
	builder.WriteString("delivery=")
	builder.WriteString(fmt.Sprintf("%v", b.Delivery))
	builder.WriteString(", ")
	builder.WriteString("take_away=")
	builder.WriteString(fmt.Sprintf("%v", b.TakeAway))
	builder.WriteByte(')')
	return builder.String()
}

// BranchesSlice is a parsable slice of Branches.
type BranchesSlice []*Branches

func (b BranchesSlice) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
