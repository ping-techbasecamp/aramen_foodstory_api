// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aramen-api/cmd/api/ent/branches"
	"aramen-api/cmd/api/ent/news"
	"aramen-api/cmd/api/ent/predicate"
	"aramen-api/cmd/api/ent/qrcode"
	"aramen-api/cmd/api/ent/user"
	"aramen-api/cmd/api/ent/userotp"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBranches = "Branches"
	TypeNews     = "News"
	TypeQrcode   = "Qrcode"
	TypeUser     = "User"
	TypeUserOtp  = "UserOtp"
)

// BranchesMutation represents an operation that mutates the Branches nodes in the graph.
type BranchesMutation struct {
	config
	op                Op
	typ               string
	id                *int
	name              *string
	short_description *string
	full_description  *string
	telephone         *string
	latitude          *int
	addlatitude       *int
	longitude         *int
	addlongitude      *int
	goole_map_url     *string
	dine_in           *bool
	delivery          *bool
	take_away         *bool
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Branches, error)
	predicates        []predicate.Branches
}

var _ ent.Mutation = (*BranchesMutation)(nil)

// branchesOption allows management of the mutation configuration using functional options.
type branchesOption func(*BranchesMutation)

// newBranchesMutation creates new mutation for the Branches entity.
func newBranchesMutation(c config, op Op, opts ...branchesOption) *BranchesMutation {
	m := &BranchesMutation{
		config:        c,
		op:            op,
		typ:           TypeBranches,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBranchesID sets the ID field of the mutation.
func withBranchesID(id int) branchesOption {
	return func(m *BranchesMutation) {
		var (
			err   error
			once  sync.Once
			value *Branches
		)
		m.oldValue = func(ctx context.Context) (*Branches, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Branches.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBranches sets the old Branches of the mutation.
func withBranches(node *Branches) branchesOption {
	return func(m *BranchesMutation) {
		m.oldValue = func(context.Context) (*Branches, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BranchesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BranchesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BranchesMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BranchesMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Branches.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *BranchesMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *BranchesMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Branches entity.
// If the Branches object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchesMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *BranchesMutation) ResetName() {
	m.name = nil
}

// SetShortDescription sets the "short_description" field.
func (m *BranchesMutation) SetShortDescription(s string) {
	m.short_description = &s
}

// ShortDescription returns the value of the "short_description" field in the mutation.
func (m *BranchesMutation) ShortDescription() (r string, exists bool) {
	v := m.short_description
	if v == nil {
		return
	}
	return *v, true
}

// OldShortDescription returns the old "short_description" field's value of the Branches entity.
// If the Branches object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchesMutation) OldShortDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShortDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShortDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShortDescription: %w", err)
	}
	return oldValue.ShortDescription, nil
}

// ResetShortDescription resets all changes to the "short_description" field.
func (m *BranchesMutation) ResetShortDescription() {
	m.short_description = nil
}

// SetFullDescription sets the "full_description" field.
func (m *BranchesMutation) SetFullDescription(s string) {
	m.full_description = &s
}

// FullDescription returns the value of the "full_description" field in the mutation.
func (m *BranchesMutation) FullDescription() (r string, exists bool) {
	v := m.full_description
	if v == nil {
		return
	}
	return *v, true
}

// OldFullDescription returns the old "full_description" field's value of the Branches entity.
// If the Branches object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchesMutation) OldFullDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullDescription: %w", err)
	}
	return oldValue.FullDescription, nil
}

// ResetFullDescription resets all changes to the "full_description" field.
func (m *BranchesMutation) ResetFullDescription() {
	m.full_description = nil
}

// SetTelephone sets the "telephone" field.
func (m *BranchesMutation) SetTelephone(s string) {
	m.telephone = &s
}

// Telephone returns the value of the "telephone" field in the mutation.
func (m *BranchesMutation) Telephone() (r string, exists bool) {
	v := m.telephone
	if v == nil {
		return
	}
	return *v, true
}

// OldTelephone returns the old "telephone" field's value of the Branches entity.
// If the Branches object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchesMutation) OldTelephone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTelephone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTelephone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTelephone: %w", err)
	}
	return oldValue.Telephone, nil
}

// ResetTelephone resets all changes to the "telephone" field.
func (m *BranchesMutation) ResetTelephone() {
	m.telephone = nil
}

// SetLatitude sets the "latitude" field.
func (m *BranchesMutation) SetLatitude(i int) {
	m.latitude = &i
	m.addlatitude = nil
}

// Latitude returns the value of the "latitude" field in the mutation.
func (m *BranchesMutation) Latitude() (r int, exists bool) {
	v := m.latitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLatitude returns the old "latitude" field's value of the Branches entity.
// If the Branches object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchesMutation) OldLatitude(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLatitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLatitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatitude: %w", err)
	}
	return oldValue.Latitude, nil
}

// AddLatitude adds i to the "latitude" field.
func (m *BranchesMutation) AddLatitude(i int) {
	if m.addlatitude != nil {
		*m.addlatitude += i
	} else {
		m.addlatitude = &i
	}
}

// AddedLatitude returns the value that was added to the "latitude" field in this mutation.
func (m *BranchesMutation) AddedLatitude() (r int, exists bool) {
	v := m.addlatitude
	if v == nil {
		return
	}
	return *v, true
}

// ResetLatitude resets all changes to the "latitude" field.
func (m *BranchesMutation) ResetLatitude() {
	m.latitude = nil
	m.addlatitude = nil
}

// SetLongitude sets the "longitude" field.
func (m *BranchesMutation) SetLongitude(i int) {
	m.longitude = &i
	m.addlongitude = nil
}

// Longitude returns the value of the "longitude" field in the mutation.
func (m *BranchesMutation) Longitude() (r int, exists bool) {
	v := m.longitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLongitude returns the old "longitude" field's value of the Branches entity.
// If the Branches object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchesMutation) OldLongitude(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLongitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLongitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongitude: %w", err)
	}
	return oldValue.Longitude, nil
}

// AddLongitude adds i to the "longitude" field.
func (m *BranchesMutation) AddLongitude(i int) {
	if m.addlongitude != nil {
		*m.addlongitude += i
	} else {
		m.addlongitude = &i
	}
}

// AddedLongitude returns the value that was added to the "longitude" field in this mutation.
func (m *BranchesMutation) AddedLongitude() (r int, exists bool) {
	v := m.addlongitude
	if v == nil {
		return
	}
	return *v, true
}

// ResetLongitude resets all changes to the "longitude" field.
func (m *BranchesMutation) ResetLongitude() {
	m.longitude = nil
	m.addlongitude = nil
}

// SetGooleMapURL sets the "goole_map_url" field.
func (m *BranchesMutation) SetGooleMapURL(s string) {
	m.goole_map_url = &s
}

// GooleMapURL returns the value of the "goole_map_url" field in the mutation.
func (m *BranchesMutation) GooleMapURL() (r string, exists bool) {
	v := m.goole_map_url
	if v == nil {
		return
	}
	return *v, true
}

// OldGooleMapURL returns the old "goole_map_url" field's value of the Branches entity.
// If the Branches object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchesMutation) OldGooleMapURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGooleMapURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGooleMapURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGooleMapURL: %w", err)
	}
	return oldValue.GooleMapURL, nil
}

// ResetGooleMapURL resets all changes to the "goole_map_url" field.
func (m *BranchesMutation) ResetGooleMapURL() {
	m.goole_map_url = nil
}

// SetDineIn sets the "dine_in" field.
func (m *BranchesMutation) SetDineIn(b bool) {
	m.dine_in = &b
}

// DineIn returns the value of the "dine_in" field in the mutation.
func (m *BranchesMutation) DineIn() (r bool, exists bool) {
	v := m.dine_in
	if v == nil {
		return
	}
	return *v, true
}

// OldDineIn returns the old "dine_in" field's value of the Branches entity.
// If the Branches object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchesMutation) OldDineIn(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDineIn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDineIn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDineIn: %w", err)
	}
	return oldValue.DineIn, nil
}

// ResetDineIn resets all changes to the "dine_in" field.
func (m *BranchesMutation) ResetDineIn() {
	m.dine_in = nil
}

// SetDelivery sets the "delivery" field.
func (m *BranchesMutation) SetDelivery(b bool) {
	m.delivery = &b
}

// Delivery returns the value of the "delivery" field in the mutation.
func (m *BranchesMutation) Delivery() (r bool, exists bool) {
	v := m.delivery
	if v == nil {
		return
	}
	return *v, true
}

// OldDelivery returns the old "delivery" field's value of the Branches entity.
// If the Branches object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchesMutation) OldDelivery(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDelivery is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDelivery requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDelivery: %w", err)
	}
	return oldValue.Delivery, nil
}

// ResetDelivery resets all changes to the "delivery" field.
func (m *BranchesMutation) ResetDelivery() {
	m.delivery = nil
}

// SetTakeAway sets the "take_away" field.
func (m *BranchesMutation) SetTakeAway(b bool) {
	m.take_away = &b
}

// TakeAway returns the value of the "take_away" field in the mutation.
func (m *BranchesMutation) TakeAway() (r bool, exists bool) {
	v := m.take_away
	if v == nil {
		return
	}
	return *v, true
}

// OldTakeAway returns the old "take_away" field's value of the Branches entity.
// If the Branches object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchesMutation) OldTakeAway(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTakeAway is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTakeAway requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTakeAway: %w", err)
	}
	return oldValue.TakeAway, nil
}

// ResetTakeAway resets all changes to the "take_away" field.
func (m *BranchesMutation) ResetTakeAway() {
	m.take_away = nil
}

// Where appends a list predicates to the BranchesMutation builder.
func (m *BranchesMutation) Where(ps ...predicate.Branches) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *BranchesMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Branches).
func (m *BranchesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BranchesMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.name != nil {
		fields = append(fields, branches.FieldName)
	}
	if m.short_description != nil {
		fields = append(fields, branches.FieldShortDescription)
	}
	if m.full_description != nil {
		fields = append(fields, branches.FieldFullDescription)
	}
	if m.telephone != nil {
		fields = append(fields, branches.FieldTelephone)
	}
	if m.latitude != nil {
		fields = append(fields, branches.FieldLatitude)
	}
	if m.longitude != nil {
		fields = append(fields, branches.FieldLongitude)
	}
	if m.goole_map_url != nil {
		fields = append(fields, branches.FieldGooleMapURL)
	}
	if m.dine_in != nil {
		fields = append(fields, branches.FieldDineIn)
	}
	if m.delivery != nil {
		fields = append(fields, branches.FieldDelivery)
	}
	if m.take_away != nil {
		fields = append(fields, branches.FieldTakeAway)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BranchesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case branches.FieldName:
		return m.Name()
	case branches.FieldShortDescription:
		return m.ShortDescription()
	case branches.FieldFullDescription:
		return m.FullDescription()
	case branches.FieldTelephone:
		return m.Telephone()
	case branches.FieldLatitude:
		return m.Latitude()
	case branches.FieldLongitude:
		return m.Longitude()
	case branches.FieldGooleMapURL:
		return m.GooleMapURL()
	case branches.FieldDineIn:
		return m.DineIn()
	case branches.FieldDelivery:
		return m.Delivery()
	case branches.FieldTakeAway:
		return m.TakeAway()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BranchesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case branches.FieldName:
		return m.OldName(ctx)
	case branches.FieldShortDescription:
		return m.OldShortDescription(ctx)
	case branches.FieldFullDescription:
		return m.OldFullDescription(ctx)
	case branches.FieldTelephone:
		return m.OldTelephone(ctx)
	case branches.FieldLatitude:
		return m.OldLatitude(ctx)
	case branches.FieldLongitude:
		return m.OldLongitude(ctx)
	case branches.FieldGooleMapURL:
		return m.OldGooleMapURL(ctx)
	case branches.FieldDineIn:
		return m.OldDineIn(ctx)
	case branches.FieldDelivery:
		return m.OldDelivery(ctx)
	case branches.FieldTakeAway:
		return m.OldTakeAway(ctx)
	}
	return nil, fmt.Errorf("unknown Branches field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BranchesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case branches.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case branches.FieldShortDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShortDescription(v)
		return nil
	case branches.FieldFullDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullDescription(v)
		return nil
	case branches.FieldTelephone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTelephone(v)
		return nil
	case branches.FieldLatitude:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatitude(v)
		return nil
	case branches.FieldLongitude:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongitude(v)
		return nil
	case branches.FieldGooleMapURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGooleMapURL(v)
		return nil
	case branches.FieldDineIn:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDineIn(v)
		return nil
	case branches.FieldDelivery:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDelivery(v)
		return nil
	case branches.FieldTakeAway:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTakeAway(v)
		return nil
	}
	return fmt.Errorf("unknown Branches field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BranchesMutation) AddedFields() []string {
	var fields []string
	if m.addlatitude != nil {
		fields = append(fields, branches.FieldLatitude)
	}
	if m.addlongitude != nil {
		fields = append(fields, branches.FieldLongitude)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BranchesMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case branches.FieldLatitude:
		return m.AddedLatitude()
	case branches.FieldLongitude:
		return m.AddedLongitude()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BranchesMutation) AddField(name string, value ent.Value) error {
	switch name {
	case branches.FieldLatitude:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLatitude(v)
		return nil
	case branches.FieldLongitude:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLongitude(v)
		return nil
	}
	return fmt.Errorf("unknown Branches numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BranchesMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BranchesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BranchesMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Branches nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BranchesMutation) ResetField(name string) error {
	switch name {
	case branches.FieldName:
		m.ResetName()
		return nil
	case branches.FieldShortDescription:
		m.ResetShortDescription()
		return nil
	case branches.FieldFullDescription:
		m.ResetFullDescription()
		return nil
	case branches.FieldTelephone:
		m.ResetTelephone()
		return nil
	case branches.FieldLatitude:
		m.ResetLatitude()
		return nil
	case branches.FieldLongitude:
		m.ResetLongitude()
		return nil
	case branches.FieldGooleMapURL:
		m.ResetGooleMapURL()
		return nil
	case branches.FieldDineIn:
		m.ResetDineIn()
		return nil
	case branches.FieldDelivery:
		m.ResetDelivery()
		return nil
	case branches.FieldTakeAway:
		m.ResetTakeAway()
		return nil
	}
	return fmt.Errorf("unknown Branches field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BranchesMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BranchesMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BranchesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BranchesMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BranchesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BranchesMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BranchesMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Branches unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BranchesMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Branches edge %s", name)
}

// NewsMutation represents an operation that mutates the News nodes in the graph.
type NewsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	description   *string
	tag           *string
	place         *string
	date          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*News, error)
	predicates    []predicate.News
}

var _ ent.Mutation = (*NewsMutation)(nil)

// newsOption allows management of the mutation configuration using functional options.
type newsOption func(*NewsMutation)

// newNewsMutation creates new mutation for the News entity.
func newNewsMutation(c config, op Op, opts ...newsOption) *NewsMutation {
	m := &NewsMutation{
		config:        c,
		op:            op,
		typ:           TypeNews,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNewsID sets the ID field of the mutation.
func withNewsID(id int) newsOption {
	return func(m *NewsMutation) {
		var (
			err   error
			once  sync.Once
			value *News
		)
		m.oldValue = func(ctx context.Context) (*News, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().News.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNews sets the old News of the mutation.
func withNews(node *News) newsOption {
	return func(m *NewsMutation) {
		m.oldValue = func(context.Context) (*News, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NewsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NewsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NewsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NewsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().News.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *NewsMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *NewsMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the News entity.
// If the News object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *NewsMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *NewsMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *NewsMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the News entity.
// If the News object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *NewsMutation) ResetDescription() {
	m.description = nil
}

// SetTag sets the "tag" field.
func (m *NewsMutation) SetTag(s string) {
	m.tag = &s
}

// Tag returns the value of the "tag" field in the mutation.
func (m *NewsMutation) Tag() (r string, exists bool) {
	v := m.tag
	if v == nil {
		return
	}
	return *v, true
}

// OldTag returns the old "tag" field's value of the News entity.
// If the News object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsMutation) OldTag(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTag is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTag requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTag: %w", err)
	}
	return oldValue.Tag, nil
}

// ResetTag resets all changes to the "tag" field.
func (m *NewsMutation) ResetTag() {
	m.tag = nil
}

// SetPlace sets the "place" field.
func (m *NewsMutation) SetPlace(s string) {
	m.place = &s
}

// Place returns the value of the "place" field in the mutation.
func (m *NewsMutation) Place() (r string, exists bool) {
	v := m.place
	if v == nil {
		return
	}
	return *v, true
}

// OldPlace returns the old "place" field's value of the News entity.
// If the News object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsMutation) OldPlace(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlace: %w", err)
	}
	return oldValue.Place, nil
}

// ResetPlace resets all changes to the "place" field.
func (m *NewsMutation) ResetPlace() {
	m.place = nil
}

// SetDate sets the "date" field.
func (m *NewsMutation) SetDate(s string) {
	m.date = &s
}

// Date returns the value of the "date" field in the mutation.
func (m *NewsMutation) Date() (r string, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the News entity.
// If the News object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsMutation) OldDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *NewsMutation) ResetDate() {
	m.date = nil
}

// Where appends a list predicates to the NewsMutation builder.
func (m *NewsMutation) Where(ps ...predicate.News) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *NewsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (News).
func (m *NewsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NewsMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, news.FieldName)
	}
	if m.description != nil {
		fields = append(fields, news.FieldDescription)
	}
	if m.tag != nil {
		fields = append(fields, news.FieldTag)
	}
	if m.place != nil {
		fields = append(fields, news.FieldPlace)
	}
	if m.date != nil {
		fields = append(fields, news.FieldDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NewsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case news.FieldName:
		return m.Name()
	case news.FieldDescription:
		return m.Description()
	case news.FieldTag:
		return m.Tag()
	case news.FieldPlace:
		return m.Place()
	case news.FieldDate:
		return m.Date()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NewsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case news.FieldName:
		return m.OldName(ctx)
	case news.FieldDescription:
		return m.OldDescription(ctx)
	case news.FieldTag:
		return m.OldTag(ctx)
	case news.FieldPlace:
		return m.OldPlace(ctx)
	case news.FieldDate:
		return m.OldDate(ctx)
	}
	return nil, fmt.Errorf("unknown News field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NewsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case news.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case news.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case news.FieldTag:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTag(v)
		return nil
	case news.FieldPlace:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlace(v)
		return nil
	case news.FieldDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	}
	return fmt.Errorf("unknown News field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NewsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NewsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NewsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown News numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NewsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NewsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NewsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown News nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NewsMutation) ResetField(name string) error {
	switch name {
	case news.FieldName:
		m.ResetName()
		return nil
	case news.FieldDescription:
		m.ResetDescription()
		return nil
	case news.FieldTag:
		m.ResetTag()
		return nil
	case news.FieldPlace:
		m.ResetPlace()
		return nil
	case news.FieldDate:
		m.ResetDate()
		return nil
	}
	return fmt.Errorf("unknown News field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NewsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NewsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NewsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NewsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NewsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NewsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NewsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown News unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NewsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown News edge %s", name)
}

// QrcodeMutation represents an operation that mutates the Qrcode nodes in the graph.
type QrcodeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	qrcode_id     *string
	order_id      *string
	order_status  *string
	branch_name   *string
	order_channel *string
	total_paid    *int
	addtotal_paid *int
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Qrcode, error)
	predicates    []predicate.Qrcode
}

var _ ent.Mutation = (*QrcodeMutation)(nil)

// qrcodeOption allows management of the mutation configuration using functional options.
type qrcodeOption func(*QrcodeMutation)

// newQrcodeMutation creates new mutation for the Qrcode entity.
func newQrcodeMutation(c config, op Op, opts ...qrcodeOption) *QrcodeMutation {
	m := &QrcodeMutation{
		config:        c,
		op:            op,
		typ:           TypeQrcode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQrcodeID sets the ID field of the mutation.
func withQrcodeID(id int) qrcodeOption {
	return func(m *QrcodeMutation) {
		var (
			err   error
			once  sync.Once
			value *Qrcode
		)
		m.oldValue = func(ctx context.Context) (*Qrcode, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Qrcode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQrcode sets the old Qrcode of the mutation.
func withQrcode(node *Qrcode) qrcodeOption {
	return func(m *QrcodeMutation) {
		m.oldValue = func(context.Context) (*Qrcode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QrcodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QrcodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QrcodeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QrcodeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Qrcode.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetQrcodeID sets the "qrcode_id" field.
func (m *QrcodeMutation) SetQrcodeID(s string) {
	m.qrcode_id = &s
}

// QrcodeID returns the value of the "qrcode_id" field in the mutation.
func (m *QrcodeMutation) QrcodeID() (r string, exists bool) {
	v := m.qrcode_id
	if v == nil {
		return
	}
	return *v, true
}

// OldQrcodeID returns the old "qrcode_id" field's value of the Qrcode entity.
// If the Qrcode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QrcodeMutation) OldQrcodeID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQrcodeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQrcodeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQrcodeID: %w", err)
	}
	return oldValue.QrcodeID, nil
}

// ResetQrcodeID resets all changes to the "qrcode_id" field.
func (m *QrcodeMutation) ResetQrcodeID() {
	m.qrcode_id = nil
}

// SetOrderID sets the "order_id" field.
func (m *QrcodeMutation) SetOrderID(s string) {
	m.order_id = &s
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *QrcodeMutation) OrderID() (r string, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the Qrcode entity.
// If the Qrcode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QrcodeMutation) OldOrderID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *QrcodeMutation) ResetOrderID() {
	m.order_id = nil
}

// SetOrderStatus sets the "order_status" field.
func (m *QrcodeMutation) SetOrderStatus(s string) {
	m.order_status = &s
}

// OrderStatus returns the value of the "order_status" field in the mutation.
func (m *QrcodeMutation) OrderStatus() (r string, exists bool) {
	v := m.order_status
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderStatus returns the old "order_status" field's value of the Qrcode entity.
// If the Qrcode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QrcodeMutation) OldOrderStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderStatus: %w", err)
	}
	return oldValue.OrderStatus, nil
}

// ResetOrderStatus resets all changes to the "order_status" field.
func (m *QrcodeMutation) ResetOrderStatus() {
	m.order_status = nil
}

// SetBranchName sets the "branch_name" field.
func (m *QrcodeMutation) SetBranchName(s string) {
	m.branch_name = &s
}

// BranchName returns the value of the "branch_name" field in the mutation.
func (m *QrcodeMutation) BranchName() (r string, exists bool) {
	v := m.branch_name
	if v == nil {
		return
	}
	return *v, true
}

// OldBranchName returns the old "branch_name" field's value of the Qrcode entity.
// If the Qrcode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QrcodeMutation) OldBranchName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBranchName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBranchName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBranchName: %w", err)
	}
	return oldValue.BranchName, nil
}

// ResetBranchName resets all changes to the "branch_name" field.
func (m *QrcodeMutation) ResetBranchName() {
	m.branch_name = nil
}

// SetOrderChannel sets the "order_channel" field.
func (m *QrcodeMutation) SetOrderChannel(s string) {
	m.order_channel = &s
}

// OrderChannel returns the value of the "order_channel" field in the mutation.
func (m *QrcodeMutation) OrderChannel() (r string, exists bool) {
	v := m.order_channel
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderChannel returns the old "order_channel" field's value of the Qrcode entity.
// If the Qrcode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QrcodeMutation) OldOrderChannel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderChannel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderChannel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderChannel: %w", err)
	}
	return oldValue.OrderChannel, nil
}

// ResetOrderChannel resets all changes to the "order_channel" field.
func (m *QrcodeMutation) ResetOrderChannel() {
	m.order_channel = nil
}

// SetTotalPaid sets the "total_paid" field.
func (m *QrcodeMutation) SetTotalPaid(i int) {
	m.total_paid = &i
	m.addtotal_paid = nil
}

// TotalPaid returns the value of the "total_paid" field in the mutation.
func (m *QrcodeMutation) TotalPaid() (r int, exists bool) {
	v := m.total_paid
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalPaid returns the old "total_paid" field's value of the Qrcode entity.
// If the Qrcode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QrcodeMutation) OldTotalPaid(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalPaid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalPaid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalPaid: %w", err)
	}
	return oldValue.TotalPaid, nil
}

// AddTotalPaid adds i to the "total_paid" field.
func (m *QrcodeMutation) AddTotalPaid(i int) {
	if m.addtotal_paid != nil {
		*m.addtotal_paid += i
	} else {
		m.addtotal_paid = &i
	}
}

// AddedTotalPaid returns the value that was added to the "total_paid" field in this mutation.
func (m *QrcodeMutation) AddedTotalPaid() (r int, exists bool) {
	v := m.addtotal_paid
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalPaid resets all changes to the "total_paid" field.
func (m *QrcodeMutation) ResetTotalPaid() {
	m.total_paid = nil
	m.addtotal_paid = nil
}

// SetUserID sets the "user_id" field.
func (m *QrcodeMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *QrcodeMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Qrcode entity.
// If the Qrcode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QrcodeMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *QrcodeMutation) ResetUserID() {
	m.user = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *QrcodeMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *QrcodeMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *QrcodeMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *QrcodeMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the QrcodeMutation builder.
func (m *QrcodeMutation) Where(ps ...predicate.Qrcode) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *QrcodeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Qrcode).
func (m *QrcodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QrcodeMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.qrcode_id != nil {
		fields = append(fields, qrcode.FieldQrcodeID)
	}
	if m.order_id != nil {
		fields = append(fields, qrcode.FieldOrderID)
	}
	if m.order_status != nil {
		fields = append(fields, qrcode.FieldOrderStatus)
	}
	if m.branch_name != nil {
		fields = append(fields, qrcode.FieldBranchName)
	}
	if m.order_channel != nil {
		fields = append(fields, qrcode.FieldOrderChannel)
	}
	if m.total_paid != nil {
		fields = append(fields, qrcode.FieldTotalPaid)
	}
	if m.user != nil {
		fields = append(fields, qrcode.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QrcodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case qrcode.FieldQrcodeID:
		return m.QrcodeID()
	case qrcode.FieldOrderID:
		return m.OrderID()
	case qrcode.FieldOrderStatus:
		return m.OrderStatus()
	case qrcode.FieldBranchName:
		return m.BranchName()
	case qrcode.FieldOrderChannel:
		return m.OrderChannel()
	case qrcode.FieldTotalPaid:
		return m.TotalPaid()
	case qrcode.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QrcodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case qrcode.FieldQrcodeID:
		return m.OldQrcodeID(ctx)
	case qrcode.FieldOrderID:
		return m.OldOrderID(ctx)
	case qrcode.FieldOrderStatus:
		return m.OldOrderStatus(ctx)
	case qrcode.FieldBranchName:
		return m.OldBranchName(ctx)
	case qrcode.FieldOrderChannel:
		return m.OldOrderChannel(ctx)
	case qrcode.FieldTotalPaid:
		return m.OldTotalPaid(ctx)
	case qrcode.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown Qrcode field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QrcodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case qrcode.FieldQrcodeID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQrcodeID(v)
		return nil
	case qrcode.FieldOrderID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case qrcode.FieldOrderStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderStatus(v)
		return nil
	case qrcode.FieldBranchName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBranchName(v)
		return nil
	case qrcode.FieldOrderChannel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderChannel(v)
		return nil
	case qrcode.FieldTotalPaid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalPaid(v)
		return nil
	case qrcode.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Qrcode field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QrcodeMutation) AddedFields() []string {
	var fields []string
	if m.addtotal_paid != nil {
		fields = append(fields, qrcode.FieldTotalPaid)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QrcodeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case qrcode.FieldTotalPaid:
		return m.AddedTotalPaid()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QrcodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case qrcode.FieldTotalPaid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalPaid(v)
		return nil
	}
	return fmt.Errorf("unknown Qrcode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QrcodeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QrcodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QrcodeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Qrcode nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QrcodeMutation) ResetField(name string) error {
	switch name {
	case qrcode.FieldQrcodeID:
		m.ResetQrcodeID()
		return nil
	case qrcode.FieldOrderID:
		m.ResetOrderID()
		return nil
	case qrcode.FieldOrderStatus:
		m.ResetOrderStatus()
		return nil
	case qrcode.FieldBranchName:
		m.ResetBranchName()
		return nil
	case qrcode.FieldOrderChannel:
		m.ResetOrderChannel()
		return nil
	case qrcode.FieldTotalPaid:
		m.ResetTotalPaid()
		return nil
	case qrcode.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown Qrcode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QrcodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, qrcode.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QrcodeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case qrcode.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QrcodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QrcodeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QrcodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, qrcode.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QrcodeMutation) EdgeCleared(name string) bool {
	switch name {
	case qrcode.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QrcodeMutation) ClearEdge(name string) error {
	switch name {
	case qrcode.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Qrcode unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QrcodeMutation) ResetEdge(name string) error {
	switch name {
	case qrcode.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Qrcode edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	first_name    *string
	last_name     *string
	phone_number  *string
	birthdate     *time.Time
	email         *string
	created_at    *time.Time
	point         *int
	addpoint      *int
	star          *int
	addstar       *int
	clearedFields map[string]struct{}
	otp           map[int]struct{}
	removedotp    map[int]struct{}
	clearedotp    bool
	qrcode        map[int]struct{}
	removedqrcode map[int]struct{}
	clearedqrcode bool
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
}

// SetPhoneNumber sets the "phone_number" field.
func (m *UserMutation) SetPhoneNumber(s string) {
	m.phone_number = &s
}

// PhoneNumber returns the value of the "phone_number" field in the mutation.
func (m *UserMutation) PhoneNumber() (r string, exists bool) {
	v := m.phone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneNumber returns the old "phone_number" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneNumber: %w", err)
	}
	return oldValue.PhoneNumber, nil
}

// ResetPhoneNumber resets all changes to the "phone_number" field.
func (m *UserMutation) ResetPhoneNumber() {
	m.phone_number = nil
}

// SetBirthdate sets the "birthdate" field.
func (m *UserMutation) SetBirthdate(t time.Time) {
	m.birthdate = &t
}

// Birthdate returns the value of the "birthdate" field in the mutation.
func (m *UserMutation) Birthdate() (r time.Time, exists bool) {
	v := m.birthdate
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthdate returns the old "birthdate" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBirthdate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBirthdate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBirthdate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthdate: %w", err)
	}
	return oldValue.Birthdate, nil
}

// ResetBirthdate resets all changes to the "birthdate" field.
func (m *UserMutation) ResetBirthdate() {
	m.birthdate = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetPoint sets the "point" field.
func (m *UserMutation) SetPoint(i int) {
	m.point = &i
	m.addpoint = nil
}

// Point returns the value of the "point" field in the mutation.
func (m *UserMutation) Point() (r int, exists bool) {
	v := m.point
	if v == nil {
		return
	}
	return *v, true
}

// OldPoint returns the old "point" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPoint(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPoint is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPoint requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPoint: %w", err)
	}
	return oldValue.Point, nil
}

// AddPoint adds i to the "point" field.
func (m *UserMutation) AddPoint(i int) {
	if m.addpoint != nil {
		*m.addpoint += i
	} else {
		m.addpoint = &i
	}
}

// AddedPoint returns the value that was added to the "point" field in this mutation.
func (m *UserMutation) AddedPoint() (r int, exists bool) {
	v := m.addpoint
	if v == nil {
		return
	}
	return *v, true
}

// ResetPoint resets all changes to the "point" field.
func (m *UserMutation) ResetPoint() {
	m.point = nil
	m.addpoint = nil
}

// SetStar sets the "star" field.
func (m *UserMutation) SetStar(i int) {
	m.star = &i
	m.addstar = nil
}

// Star returns the value of the "star" field in the mutation.
func (m *UserMutation) Star() (r int, exists bool) {
	v := m.star
	if v == nil {
		return
	}
	return *v, true
}

// OldStar returns the old "star" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStar(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStar: %w", err)
	}
	return oldValue.Star, nil
}

// AddStar adds i to the "star" field.
func (m *UserMutation) AddStar(i int) {
	if m.addstar != nil {
		*m.addstar += i
	} else {
		m.addstar = &i
	}
}

// AddedStar returns the value that was added to the "star" field in this mutation.
func (m *UserMutation) AddedStar() (r int, exists bool) {
	v := m.addstar
	if v == nil {
		return
	}
	return *v, true
}

// ResetStar resets all changes to the "star" field.
func (m *UserMutation) ResetStar() {
	m.star = nil
	m.addstar = nil
}

// AddOtpIDs adds the "otp" edge to the UserOtp entity by ids.
func (m *UserMutation) AddOtpIDs(ids ...int) {
	if m.otp == nil {
		m.otp = make(map[int]struct{})
	}
	for i := range ids {
		m.otp[ids[i]] = struct{}{}
	}
}

// ClearOtp clears the "otp" edge to the UserOtp entity.
func (m *UserMutation) ClearOtp() {
	m.clearedotp = true
}

// OtpCleared reports if the "otp" edge to the UserOtp entity was cleared.
func (m *UserMutation) OtpCleared() bool {
	return m.clearedotp
}

// RemoveOtpIDs removes the "otp" edge to the UserOtp entity by IDs.
func (m *UserMutation) RemoveOtpIDs(ids ...int) {
	if m.removedotp == nil {
		m.removedotp = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.otp, ids[i])
		m.removedotp[ids[i]] = struct{}{}
	}
}

// RemovedOtp returns the removed IDs of the "otp" edge to the UserOtp entity.
func (m *UserMutation) RemovedOtpIDs() (ids []int) {
	for id := range m.removedotp {
		ids = append(ids, id)
	}
	return
}

// OtpIDs returns the "otp" edge IDs in the mutation.
func (m *UserMutation) OtpIDs() (ids []int) {
	for id := range m.otp {
		ids = append(ids, id)
	}
	return
}

// ResetOtp resets all changes to the "otp" edge.
func (m *UserMutation) ResetOtp() {
	m.otp = nil
	m.clearedotp = false
	m.removedotp = nil
}

// AddQrcodeIDs adds the "qrcode" edge to the Qrcode entity by ids.
func (m *UserMutation) AddQrcodeIDs(ids ...int) {
	if m.qrcode == nil {
		m.qrcode = make(map[int]struct{})
	}
	for i := range ids {
		m.qrcode[ids[i]] = struct{}{}
	}
}

// ClearQrcode clears the "qrcode" edge to the Qrcode entity.
func (m *UserMutation) ClearQrcode() {
	m.clearedqrcode = true
}

// QrcodeCleared reports if the "qrcode" edge to the Qrcode entity was cleared.
func (m *UserMutation) QrcodeCleared() bool {
	return m.clearedqrcode
}

// RemoveQrcodeIDs removes the "qrcode" edge to the Qrcode entity by IDs.
func (m *UserMutation) RemoveQrcodeIDs(ids ...int) {
	if m.removedqrcode == nil {
		m.removedqrcode = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.qrcode, ids[i])
		m.removedqrcode[ids[i]] = struct{}{}
	}
}

// RemovedQrcode returns the removed IDs of the "qrcode" edge to the Qrcode entity.
func (m *UserMutation) RemovedQrcodeIDs() (ids []int) {
	for id := range m.removedqrcode {
		ids = append(ids, id)
	}
	return
}

// QrcodeIDs returns the "qrcode" edge IDs in the mutation.
func (m *UserMutation) QrcodeIDs() (ids []int) {
	for id := range m.qrcode {
		ids = append(ids, id)
	}
	return
}

// ResetQrcode resets all changes to the "qrcode" edge.
func (m *UserMutation) ResetQrcode() {
	m.qrcode = nil
	m.clearedqrcode = false
	m.removedqrcode = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	if m.phone_number != nil {
		fields = append(fields, user.FieldPhoneNumber)
	}
	if m.birthdate != nil {
		fields = append(fields, user.FieldBirthdate)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.point != nil {
		fields = append(fields, user.FieldPoint)
	}
	if m.star != nil {
		fields = append(fields, user.FieldStar)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	case user.FieldPhoneNumber:
		return m.PhoneNumber()
	case user.FieldBirthdate:
		return m.Birthdate()
	case user.FieldEmail:
		return m.Email()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldPoint:
		return m.Point()
	case user.FieldStar:
		return m.Star()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	case user.FieldPhoneNumber:
		return m.OldPhoneNumber(ctx)
	case user.FieldBirthdate:
		return m.OldBirthdate(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldPoint:
		return m.OldPoint(ctx)
	case user.FieldStar:
		return m.OldStar(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case user.FieldPhoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneNumber(v)
		return nil
	case user.FieldBirthdate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthdate(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldPoint:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPoint(v)
		return nil
	case user.FieldStar:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStar(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addpoint != nil {
		fields = append(fields, user.FieldPoint)
	}
	if m.addstar != nil {
		fields = append(fields, user.FieldStar)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldPoint:
		return m.AddedPoint()
	case user.FieldStar:
		return m.AddedStar()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldPoint:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPoint(v)
		return nil
	case user.FieldStar:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStar(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	case user.FieldPhoneNumber:
		m.ResetPhoneNumber()
		return nil
	case user.FieldBirthdate:
		m.ResetBirthdate()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldPoint:
		m.ResetPoint()
		return nil
	case user.FieldStar:
		m.ResetStar()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.otp != nil {
		edges = append(edges, user.EdgeOtp)
	}
	if m.qrcode != nil {
		edges = append(edges, user.EdgeQrcode)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeOtp:
		ids := make([]ent.Value, 0, len(m.otp))
		for id := range m.otp {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeQrcode:
		ids := make([]ent.Value, 0, len(m.qrcode))
		for id := range m.qrcode {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedotp != nil {
		edges = append(edges, user.EdgeOtp)
	}
	if m.removedqrcode != nil {
		edges = append(edges, user.EdgeQrcode)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeOtp:
		ids := make([]ent.Value, 0, len(m.removedotp))
		for id := range m.removedotp {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeQrcode:
		ids := make([]ent.Value, 0, len(m.removedqrcode))
		for id := range m.removedqrcode {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedotp {
		edges = append(edges, user.EdgeOtp)
	}
	if m.clearedqrcode {
		edges = append(edges, user.EdgeQrcode)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeOtp:
		return m.clearedotp
	case user.EdgeQrcode:
		return m.clearedqrcode
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeOtp:
		m.ResetOtp()
		return nil
	case user.EdgeQrcode:
		m.ResetQrcode()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserOtpMutation represents an operation that mutates the UserOtp nodes in the graph.
type UserOtpMutation struct {
	config
	op            Op
	typ           string
	id            *int
	reference     *string
	hashed_otp    *string
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*UserOtp, error)
	predicates    []predicate.UserOtp
}

var _ ent.Mutation = (*UserOtpMutation)(nil)

// userotpOption allows management of the mutation configuration using functional options.
type userotpOption func(*UserOtpMutation)

// newUserOtpMutation creates new mutation for the UserOtp entity.
func newUserOtpMutation(c config, op Op, opts ...userotpOption) *UserOtpMutation {
	m := &UserOtpMutation{
		config:        c,
		op:            op,
		typ:           TypeUserOtp,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserOtpID sets the ID field of the mutation.
func withUserOtpID(id int) userotpOption {
	return func(m *UserOtpMutation) {
		var (
			err   error
			once  sync.Once
			value *UserOtp
		)
		m.oldValue = func(ctx context.Context) (*UserOtp, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserOtp.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserOtp sets the old UserOtp of the mutation.
func withUserOtp(node *UserOtp) userotpOption {
	return func(m *UserOtpMutation) {
		m.oldValue = func(context.Context) (*UserOtp, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserOtpMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserOtpMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserOtpMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserOtpMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserOtp.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *UserOtpMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserOtpMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserOtp entity.
// If the UserOtp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserOtpMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserOtpMutation) ResetUserID() {
	m.user = nil
}

// SetReference sets the "reference" field.
func (m *UserOtpMutation) SetReference(s string) {
	m.reference = &s
}

// Reference returns the value of the "reference" field in the mutation.
func (m *UserOtpMutation) Reference() (r string, exists bool) {
	v := m.reference
	if v == nil {
		return
	}
	return *v, true
}

// OldReference returns the old "reference" field's value of the UserOtp entity.
// If the UserOtp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserOtpMutation) OldReference(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReference is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReference requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReference: %w", err)
	}
	return oldValue.Reference, nil
}

// ResetReference resets all changes to the "reference" field.
func (m *UserOtpMutation) ResetReference() {
	m.reference = nil
}

// SetHashedOtp sets the "hashed_otp" field.
func (m *UserOtpMutation) SetHashedOtp(s string) {
	m.hashed_otp = &s
}

// HashedOtp returns the value of the "hashed_otp" field in the mutation.
func (m *UserOtpMutation) HashedOtp() (r string, exists bool) {
	v := m.hashed_otp
	if v == nil {
		return
	}
	return *v, true
}

// OldHashedOtp returns the old "hashed_otp" field's value of the UserOtp entity.
// If the UserOtp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserOtpMutation) OldHashedOtp(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashedOtp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashedOtp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashedOtp: %w", err)
	}
	return oldValue.HashedOtp, nil
}

// ResetHashedOtp resets all changes to the "hashed_otp" field.
func (m *UserOtpMutation) ResetHashedOtp() {
	m.hashed_otp = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserOtpMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserOtpMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserOtpMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserOtpMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the UserOtpMutation builder.
func (m *UserOtpMutation) Where(ps ...predicate.UserOtp) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserOtpMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserOtp).
func (m *UserOtpMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserOtpMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.user != nil {
		fields = append(fields, userotp.FieldUserID)
	}
	if m.reference != nil {
		fields = append(fields, userotp.FieldReference)
	}
	if m.hashed_otp != nil {
		fields = append(fields, userotp.FieldHashedOtp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserOtpMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userotp.FieldUserID:
		return m.UserID()
	case userotp.FieldReference:
		return m.Reference()
	case userotp.FieldHashedOtp:
		return m.HashedOtp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserOtpMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userotp.FieldUserID:
		return m.OldUserID(ctx)
	case userotp.FieldReference:
		return m.OldReference(ctx)
	case userotp.FieldHashedOtp:
		return m.OldHashedOtp(ctx)
	}
	return nil, fmt.Errorf("unknown UserOtp field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserOtpMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userotp.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userotp.FieldReference:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReference(v)
		return nil
	case userotp.FieldHashedOtp:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashedOtp(v)
		return nil
	}
	return fmt.Errorf("unknown UserOtp field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserOtpMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserOtpMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserOtpMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserOtp numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserOtpMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserOtpMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserOtpMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserOtp nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserOtpMutation) ResetField(name string) error {
	switch name {
	case userotp.FieldUserID:
		m.ResetUserID()
		return nil
	case userotp.FieldReference:
		m.ResetReference()
		return nil
	case userotp.FieldHashedOtp:
		m.ResetHashedOtp()
		return nil
	}
	return fmt.Errorf("unknown UserOtp field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserOtpMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, userotp.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserOtpMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case userotp.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserOtpMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserOtpMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserOtpMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, userotp.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserOtpMutation) EdgeCleared(name string) bool {
	switch name {
	case userotp.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserOtpMutation) ClearEdge(name string) error {
	switch name {
	case userotp.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown UserOtp unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserOtpMutation) ResetEdge(name string) error {
	switch name {
	case userotp.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown UserOtp edge %s", name)
}
