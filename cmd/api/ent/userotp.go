// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aramen-api/cmd/api/ent/user"
	"aramen-api/cmd/api/ent/userotp"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// UserOtp is the model entity for the UserOtp schema.
type UserOtp struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Reference holds the value of the "reference" field.
	Reference string `json:"reference,omitempty"`
	// HashedOtp holds the value of the "hashed_otp" field.
	HashedOtp string `json:"hashed_otp,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserOtpQuery when eager-loading is set.
	Edges UserOtpEdges `json:"edges"`
}

// UserOtpEdges holds the relations/edges for other nodes in the graph.
type UserOtpEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserOtpEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserOtp) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userotp.FieldID, userotp.FieldUserID:
			values[i] = new(sql.NullInt64)
		case userotp.FieldReference, userotp.FieldHashedOtp:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserOtp", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserOtp fields.
func (uo *UserOtp) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userotp.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uo.ID = int(value.Int64)
		case userotp.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				uo.UserID = int(value.Int64)
			}
		case userotp.FieldReference:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference", values[i])
			} else if value.Valid {
				uo.Reference = value.String
			}
		case userotp.FieldHashedOtp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hashed_otp", values[i])
			} else if value.Valid {
				uo.HashedOtp = value.String
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the UserOtp entity.
func (uo *UserOtp) QueryUser() *UserQuery {
	return (&UserOtpClient{config: uo.config}).QueryUser(uo)
}

// Update returns a builder for updating this UserOtp.
// Note that you need to call UserOtp.Unwrap() before calling this method if this UserOtp
// was returned from a transaction, and the transaction was committed or rolled back.
func (uo *UserOtp) Update() *UserOtpUpdateOne {
	return (&UserOtpClient{config: uo.config}).UpdateOne(uo)
}

// Unwrap unwraps the UserOtp entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uo *UserOtp) Unwrap() *UserOtp {
	_tx, ok := uo.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserOtp is not a transactional entity")
	}
	uo.config.driver = _tx.drv
	return uo
}

// String implements the fmt.Stringer.
func (uo *UserOtp) String() string {
	var builder strings.Builder
	builder.WriteString("UserOtp(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uo.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", uo.UserID))
	builder.WriteString(", ")
	builder.WriteString("reference=")
	builder.WriteString(uo.Reference)
	builder.WriteString(", ")
	builder.WriteString("hashed_otp=")
	builder.WriteString(uo.HashedOtp)
	builder.WriteByte(')')
	return builder.String()
}

// UserOtps is a parsable slice of UserOtp.
type UserOtps []*UserOtp

func (uo UserOtps) config(cfg config) {
	for _i := range uo {
		uo[_i].config = cfg
	}
}
