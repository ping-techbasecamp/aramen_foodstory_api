// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aramen-api/cmd/api/ent/qrcode"
	"aramen-api/cmd/api/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Qrcode is the model entity for the Qrcode schema.
type Qrcode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// QrcodeID holds the value of the "qrcode_id" field.
	QrcodeID string `json:"qrcode_id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID string `json:"order_id,omitempty"`
	// OrderStatus holds the value of the "order_status" field.
	OrderStatus string `json:"order_status,omitempty"`
	// BranchName holds the value of the "branch_name" field.
	BranchName string `json:"branch_name,omitempty"`
	// OrderChannel holds the value of the "order_channel" field.
	OrderChannel string `json:"order_channel,omitempty"`
	// TotalPaid holds the value of the "total_paid" field.
	TotalPaid int `json:"total_paid,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QrcodeQuery when eager-loading is set.
	Edges QrcodeEdges `json:"edges"`
}

// QrcodeEdges holds the relations/edges for other nodes in the graph.
type QrcodeEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QrcodeEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Qrcode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case qrcode.FieldID, qrcode.FieldTotalPaid, qrcode.FieldUserID:
			values[i] = new(sql.NullInt64)
		case qrcode.FieldQrcodeID, qrcode.FieldOrderID, qrcode.FieldOrderStatus, qrcode.FieldBranchName, qrcode.FieldOrderChannel:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Qrcode", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Qrcode fields.
func (q *Qrcode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case qrcode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			q.ID = int(value.Int64)
		case qrcode.FieldQrcodeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field qrcode_id", values[i])
			} else if value.Valid {
				q.QrcodeID = value.String
			}
		case qrcode.FieldOrderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				q.OrderID = value.String
			}
		case qrcode.FieldOrderStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_status", values[i])
			} else if value.Valid {
				q.OrderStatus = value.String
			}
		case qrcode.FieldBranchName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field branch_name", values[i])
			} else if value.Valid {
				q.BranchName = value.String
			}
		case qrcode.FieldOrderChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_channel", values[i])
			} else if value.Valid {
				q.OrderChannel = value.String
			}
		case qrcode.FieldTotalPaid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_paid", values[i])
			} else if value.Valid {
				q.TotalPaid = int(value.Int64)
			}
		case qrcode.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				q.UserID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Qrcode entity.
func (q *Qrcode) QueryUser() *UserQuery {
	return (&QrcodeClient{config: q.config}).QueryUser(q)
}

// Update returns a builder for updating this Qrcode.
// Note that you need to call Qrcode.Unwrap() before calling this method if this Qrcode
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Qrcode) Update() *QrcodeUpdateOne {
	return (&QrcodeClient{config: q.config}).UpdateOne(q)
}

// Unwrap unwraps the Qrcode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Qrcode) Unwrap() *Qrcode {
	_tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Qrcode is not a transactional entity")
	}
	q.config.driver = _tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Qrcode) String() string {
	var builder strings.Builder
	builder.WriteString("Qrcode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", q.ID))
	builder.WriteString("qrcode_id=")
	builder.WriteString(q.QrcodeID)
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(q.OrderID)
	builder.WriteString(", ")
	builder.WriteString("order_status=")
	builder.WriteString(q.OrderStatus)
	builder.WriteString(", ")
	builder.WriteString("branch_name=")
	builder.WriteString(q.BranchName)
	builder.WriteString(", ")
	builder.WriteString("order_channel=")
	builder.WriteString(q.OrderChannel)
	builder.WriteString(", ")
	builder.WriteString("total_paid=")
	builder.WriteString(fmt.Sprintf("%v", q.TotalPaid))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", q.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// Qrcodes is a parsable slice of Qrcode.
type Qrcodes []*Qrcode

func (q Qrcodes) config(cfg config) {
	for _i := range q {
		q[_i].config = cfg
	}
}
