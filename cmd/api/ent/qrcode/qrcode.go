// Code generated by ent, DO NOT EDIT.

package qrcode

const (
	// Label holds the string label denoting the qrcode type in the database.
	Label = "qrcode"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQrcodeID holds the string denoting the qrcode_id field in the database.
	FieldQrcodeID = "qrcode_id"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldOrderStatus holds the string denoting the order_status field in the database.
	FieldOrderStatus = "order_status"
	// FieldBranchName holds the string denoting the branch_name field in the database.
	FieldBranchName = "branch_name"
	// FieldOrderChannel holds the string denoting the order_channel field in the database.
	FieldOrderChannel = "order_channel"
	// FieldTotalPaid holds the string denoting the total_paid field in the database.
	FieldTotalPaid = "total_paid"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the qrcode in the database.
	Table = "qrcodes"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "qrcodes"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for qrcode fields.
var Columns = []string{
	FieldID,
	FieldQrcodeID,
	FieldOrderID,
	FieldOrderStatus,
	FieldBranchName,
	FieldOrderChannel,
	FieldTotalPaid,
	FieldUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
