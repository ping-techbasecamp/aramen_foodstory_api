// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"aramen-api/cmd/api/ent/migrate"

	"aramen-api/cmd/api/ent/branches"
	"aramen-api/cmd/api/ent/news"
	"aramen-api/cmd/api/ent/qrcode"
	"aramen-api/cmd/api/ent/user"
	"aramen-api/cmd/api/ent/userotp"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Branches is the client for interacting with the Branches builders.
	Branches *BranchesClient
	// News is the client for interacting with the News builders.
	News *NewsClient
	// Qrcode is the client for interacting with the Qrcode builders.
	Qrcode *QrcodeClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserOtp is the client for interacting with the UserOtp builders.
	UserOtp *UserOtpClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Branches = NewBranchesClient(c.config)
	c.News = NewNewsClient(c.config)
	c.Qrcode = NewQrcodeClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserOtp = NewUserOtpClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Branches: NewBranchesClient(cfg),
		News:     NewNewsClient(cfg),
		Qrcode:   NewQrcodeClient(cfg),
		User:     NewUserClient(cfg),
		UserOtp:  NewUserOtpClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Branches: NewBranchesClient(cfg),
		News:     NewNewsClient(cfg),
		Qrcode:   NewQrcodeClient(cfg),
		User:     NewUserClient(cfg),
		UserOtp:  NewUserOtpClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Branches.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Branches.Use(hooks...)
	c.News.Use(hooks...)
	c.Qrcode.Use(hooks...)
	c.User.Use(hooks...)
	c.UserOtp.Use(hooks...)
}

// BranchesClient is a client for the Branches schema.
type BranchesClient struct {
	config
}

// NewBranchesClient returns a client for the Branches from the given config.
func NewBranchesClient(c config) *BranchesClient {
	return &BranchesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `branches.Hooks(f(g(h())))`.
func (c *BranchesClient) Use(hooks ...Hook) {
	c.hooks.Branches = append(c.hooks.Branches, hooks...)
}

// Create returns a builder for creating a Branches entity.
func (c *BranchesClient) Create() *BranchesCreate {
	mutation := newBranchesMutation(c.config, OpCreate)
	return &BranchesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Branches entities.
func (c *BranchesClient) CreateBulk(builders ...*BranchesCreate) *BranchesCreateBulk {
	return &BranchesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Branches.
func (c *BranchesClient) Update() *BranchesUpdate {
	mutation := newBranchesMutation(c.config, OpUpdate)
	return &BranchesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BranchesClient) UpdateOne(b *Branches) *BranchesUpdateOne {
	mutation := newBranchesMutation(c.config, OpUpdateOne, withBranches(b))
	return &BranchesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BranchesClient) UpdateOneID(id int) *BranchesUpdateOne {
	mutation := newBranchesMutation(c.config, OpUpdateOne, withBranchesID(id))
	return &BranchesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Branches.
func (c *BranchesClient) Delete() *BranchesDelete {
	mutation := newBranchesMutation(c.config, OpDelete)
	return &BranchesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BranchesClient) DeleteOne(b *Branches) *BranchesDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *BranchesClient) DeleteOneID(id int) *BranchesDeleteOne {
	builder := c.Delete().Where(branches.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BranchesDeleteOne{builder}
}

// Query returns a query builder for Branches.
func (c *BranchesClient) Query() *BranchesQuery {
	return &BranchesQuery{
		config: c.config,
	}
}

// Get returns a Branches entity by its id.
func (c *BranchesClient) Get(ctx context.Context, id int) (*Branches, error) {
	return c.Query().Where(branches.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BranchesClient) GetX(ctx context.Context, id int) *Branches {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BranchesClient) Hooks() []Hook {
	return c.hooks.Branches
}

// NewsClient is a client for the News schema.
type NewsClient struct {
	config
}

// NewNewsClient returns a client for the News from the given config.
func NewNewsClient(c config) *NewsClient {
	return &NewsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `news.Hooks(f(g(h())))`.
func (c *NewsClient) Use(hooks ...Hook) {
	c.hooks.News = append(c.hooks.News, hooks...)
}

// Create returns a builder for creating a News entity.
func (c *NewsClient) Create() *NewsCreate {
	mutation := newNewsMutation(c.config, OpCreate)
	return &NewsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of News entities.
func (c *NewsClient) CreateBulk(builders ...*NewsCreate) *NewsCreateBulk {
	return &NewsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for News.
func (c *NewsClient) Update() *NewsUpdate {
	mutation := newNewsMutation(c.config, OpUpdate)
	return &NewsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NewsClient) UpdateOne(n *News) *NewsUpdateOne {
	mutation := newNewsMutation(c.config, OpUpdateOne, withNews(n))
	return &NewsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NewsClient) UpdateOneID(id int) *NewsUpdateOne {
	mutation := newNewsMutation(c.config, OpUpdateOne, withNewsID(id))
	return &NewsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for News.
func (c *NewsClient) Delete() *NewsDelete {
	mutation := newNewsMutation(c.config, OpDelete)
	return &NewsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NewsClient) DeleteOne(n *News) *NewsDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *NewsClient) DeleteOneID(id int) *NewsDeleteOne {
	builder := c.Delete().Where(news.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NewsDeleteOne{builder}
}

// Query returns a query builder for News.
func (c *NewsClient) Query() *NewsQuery {
	return &NewsQuery{
		config: c.config,
	}
}

// Get returns a News entity by its id.
func (c *NewsClient) Get(ctx context.Context, id int) (*News, error) {
	return c.Query().Where(news.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NewsClient) GetX(ctx context.Context, id int) *News {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NewsClient) Hooks() []Hook {
	return c.hooks.News
}

// QrcodeClient is a client for the Qrcode schema.
type QrcodeClient struct {
	config
}

// NewQrcodeClient returns a client for the Qrcode from the given config.
func NewQrcodeClient(c config) *QrcodeClient {
	return &QrcodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `qrcode.Hooks(f(g(h())))`.
func (c *QrcodeClient) Use(hooks ...Hook) {
	c.hooks.Qrcode = append(c.hooks.Qrcode, hooks...)
}

// Create returns a builder for creating a Qrcode entity.
func (c *QrcodeClient) Create() *QrcodeCreate {
	mutation := newQrcodeMutation(c.config, OpCreate)
	return &QrcodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Qrcode entities.
func (c *QrcodeClient) CreateBulk(builders ...*QrcodeCreate) *QrcodeCreateBulk {
	return &QrcodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Qrcode.
func (c *QrcodeClient) Update() *QrcodeUpdate {
	mutation := newQrcodeMutation(c.config, OpUpdate)
	return &QrcodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QrcodeClient) UpdateOne(q *Qrcode) *QrcodeUpdateOne {
	mutation := newQrcodeMutation(c.config, OpUpdateOne, withQrcode(q))
	return &QrcodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QrcodeClient) UpdateOneID(id int) *QrcodeUpdateOne {
	mutation := newQrcodeMutation(c.config, OpUpdateOne, withQrcodeID(id))
	return &QrcodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Qrcode.
func (c *QrcodeClient) Delete() *QrcodeDelete {
	mutation := newQrcodeMutation(c.config, OpDelete)
	return &QrcodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QrcodeClient) DeleteOne(q *Qrcode) *QrcodeDeleteOne {
	return c.DeleteOneID(q.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *QrcodeClient) DeleteOneID(id int) *QrcodeDeleteOne {
	builder := c.Delete().Where(qrcode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QrcodeDeleteOne{builder}
}

// Query returns a query builder for Qrcode.
func (c *QrcodeClient) Query() *QrcodeQuery {
	return &QrcodeQuery{
		config: c.config,
	}
}

// Get returns a Qrcode entity by its id.
func (c *QrcodeClient) Get(ctx context.Context, id int) (*Qrcode, error) {
	return c.Query().Where(qrcode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QrcodeClient) GetX(ctx context.Context, id int) *Qrcode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Qrcode.
func (c *QrcodeClient) QueryUser(q *Qrcode) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(qrcode.Table, qrcode.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, qrcode.UserTable, qrcode.UserColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QrcodeClient) Hooks() []Hook {
	return c.hooks.Qrcode
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOtp queries the otp edge of a User.
func (c *UserClient) QueryOtp(u *User) *UserOtpQuery {
	query := &UserOtpQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userotp.Table, userotp.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.OtpTable, user.OtpColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQrcode queries the qrcode edge of a User.
func (c *UserClient) QueryQrcode(u *User) *QrcodeQuery {
	query := &QrcodeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(qrcode.Table, qrcode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.QrcodeTable, user.QrcodeColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserOtpClient is a client for the UserOtp schema.
type UserOtpClient struct {
	config
}

// NewUserOtpClient returns a client for the UserOtp from the given config.
func NewUserOtpClient(c config) *UserOtpClient {
	return &UserOtpClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userotp.Hooks(f(g(h())))`.
func (c *UserOtpClient) Use(hooks ...Hook) {
	c.hooks.UserOtp = append(c.hooks.UserOtp, hooks...)
}

// Create returns a builder for creating a UserOtp entity.
func (c *UserOtpClient) Create() *UserOtpCreate {
	mutation := newUserOtpMutation(c.config, OpCreate)
	return &UserOtpCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserOtp entities.
func (c *UserOtpClient) CreateBulk(builders ...*UserOtpCreate) *UserOtpCreateBulk {
	return &UserOtpCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserOtp.
func (c *UserOtpClient) Update() *UserOtpUpdate {
	mutation := newUserOtpMutation(c.config, OpUpdate)
	return &UserOtpUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserOtpClient) UpdateOne(uo *UserOtp) *UserOtpUpdateOne {
	mutation := newUserOtpMutation(c.config, OpUpdateOne, withUserOtp(uo))
	return &UserOtpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserOtpClient) UpdateOneID(id int) *UserOtpUpdateOne {
	mutation := newUserOtpMutation(c.config, OpUpdateOne, withUserOtpID(id))
	return &UserOtpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserOtp.
func (c *UserOtpClient) Delete() *UserOtpDelete {
	mutation := newUserOtpMutation(c.config, OpDelete)
	return &UserOtpDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserOtpClient) DeleteOne(uo *UserOtp) *UserOtpDeleteOne {
	return c.DeleteOneID(uo.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *UserOtpClient) DeleteOneID(id int) *UserOtpDeleteOne {
	builder := c.Delete().Where(userotp.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserOtpDeleteOne{builder}
}

// Query returns a query builder for UserOtp.
func (c *UserOtpClient) Query() *UserOtpQuery {
	return &UserOtpQuery{
		config: c.config,
	}
}

// Get returns a UserOtp entity by its id.
func (c *UserOtpClient) Get(ctx context.Context, id int) (*UserOtp, error) {
	return c.Query().Where(userotp.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserOtpClient) GetX(ctx context.Context, id int) *UserOtp {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserOtp.
func (c *UserOtpClient) QueryUser(uo *UserOtp) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userotp.Table, userotp.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userotp.UserTable, userotp.UserColumn),
		)
		fromV = sqlgraph.Neighbors(uo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserOtpClient) Hooks() []Hook {
	return c.hooks.UserOtp
}
