// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aramen-api/cmd/api/ent/predicate"
	"aramen-api/cmd/api/ent/user"
	"aramen-api/cmd/api/ent/userotp"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserOtpUpdate is the builder for updating UserOtp entities.
type UserOtpUpdate struct {
	config
	hooks    []Hook
	mutation *UserOtpMutation
}

// Where appends a list predicates to the UserOtpUpdate builder.
func (uou *UserOtpUpdate) Where(ps ...predicate.UserOtp) *UserOtpUpdate {
	uou.mutation.Where(ps...)
	return uou
}

// SetUserID sets the "user_id" field.
func (uou *UserOtpUpdate) SetUserID(i int) *UserOtpUpdate {
	uou.mutation.SetUserID(i)
	return uou
}

// SetReference sets the "reference" field.
func (uou *UserOtpUpdate) SetReference(s string) *UserOtpUpdate {
	uou.mutation.SetReference(s)
	return uou
}

// SetHashedOtp sets the "hashed_otp" field.
func (uou *UserOtpUpdate) SetHashedOtp(s string) *UserOtpUpdate {
	uou.mutation.SetHashedOtp(s)
	return uou
}

// SetUser sets the "user" edge to the User entity.
func (uou *UserOtpUpdate) SetUser(u *User) *UserOtpUpdate {
	return uou.SetUserID(u.ID)
}

// Mutation returns the UserOtpMutation object of the builder.
func (uou *UserOtpUpdate) Mutation() *UserOtpMutation {
	return uou.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uou *UserOtpUpdate) ClearUser() *UserOtpUpdate {
	uou.mutation.ClearUser()
	return uou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uou *UserOtpUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uou.hooks) == 0 {
		if err = uou.check(); err != nil {
			return 0, err
		}
		affected, err = uou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserOtpMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uou.check(); err != nil {
				return 0, err
			}
			uou.mutation = mutation
			affected, err = uou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uou.hooks) - 1; i >= 0; i-- {
			if uou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uou *UserOtpUpdate) SaveX(ctx context.Context) int {
	affected, err := uou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uou *UserOtpUpdate) Exec(ctx context.Context) error {
	_, err := uou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uou *UserOtpUpdate) ExecX(ctx context.Context) {
	if err := uou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uou *UserOtpUpdate) check() error {
	if _, ok := uou.mutation.UserID(); uou.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserOtp.user"`)
	}
	return nil
}

func (uou *UserOtpUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userotp.Table,
			Columns: userotp.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userotp.FieldID,
			},
		},
	}
	if ps := uou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uou.mutation.Reference(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userotp.FieldReference,
		})
	}
	if value, ok := uou.mutation.HashedOtp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userotp.FieldHashedOtp,
		})
	}
	if uou.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userotp.UserTable,
			Columns: []string{userotp.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uou.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userotp.UserTable,
			Columns: []string{userotp.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userotp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserOtpUpdateOne is the builder for updating a single UserOtp entity.
type UserOtpUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserOtpMutation
}

// SetUserID sets the "user_id" field.
func (uouo *UserOtpUpdateOne) SetUserID(i int) *UserOtpUpdateOne {
	uouo.mutation.SetUserID(i)
	return uouo
}

// SetReference sets the "reference" field.
func (uouo *UserOtpUpdateOne) SetReference(s string) *UserOtpUpdateOne {
	uouo.mutation.SetReference(s)
	return uouo
}

// SetHashedOtp sets the "hashed_otp" field.
func (uouo *UserOtpUpdateOne) SetHashedOtp(s string) *UserOtpUpdateOne {
	uouo.mutation.SetHashedOtp(s)
	return uouo
}

// SetUser sets the "user" edge to the User entity.
func (uouo *UserOtpUpdateOne) SetUser(u *User) *UserOtpUpdateOne {
	return uouo.SetUserID(u.ID)
}

// Mutation returns the UserOtpMutation object of the builder.
func (uouo *UserOtpUpdateOne) Mutation() *UserOtpMutation {
	return uouo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uouo *UserOtpUpdateOne) ClearUser() *UserOtpUpdateOne {
	uouo.mutation.ClearUser()
	return uouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uouo *UserOtpUpdateOne) Select(field string, fields ...string) *UserOtpUpdateOne {
	uouo.fields = append([]string{field}, fields...)
	return uouo
}

// Save executes the query and returns the updated UserOtp entity.
func (uouo *UserOtpUpdateOne) Save(ctx context.Context) (*UserOtp, error) {
	var (
		err  error
		node *UserOtp
	)
	if len(uouo.hooks) == 0 {
		if err = uouo.check(); err != nil {
			return nil, err
		}
		node, err = uouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserOtpMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uouo.check(); err != nil {
				return nil, err
			}
			uouo.mutation = mutation
			node, err = uouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uouo.hooks) - 1; i >= 0; i-- {
			if uouo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uouo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uouo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserOtp)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserOtpMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uouo *UserOtpUpdateOne) SaveX(ctx context.Context) *UserOtp {
	node, err := uouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uouo *UserOtpUpdateOne) Exec(ctx context.Context) error {
	_, err := uouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uouo *UserOtpUpdateOne) ExecX(ctx context.Context) {
	if err := uouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uouo *UserOtpUpdateOne) check() error {
	if _, ok := uouo.mutation.UserID(); uouo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserOtp.user"`)
	}
	return nil
}

func (uouo *UserOtpUpdateOne) sqlSave(ctx context.Context) (_node *UserOtp, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userotp.Table,
			Columns: userotp.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userotp.FieldID,
			},
		},
	}
	id, ok := uouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserOtp.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userotp.FieldID)
		for _, f := range fields {
			if !userotp.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userotp.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uouo.mutation.Reference(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userotp.FieldReference,
		})
	}
	if value, ok := uouo.mutation.HashedOtp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userotp.FieldHashedOtp,
		})
	}
	if uouo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userotp.UserTable,
			Columns: []string{userotp.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uouo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userotp.UserTable,
			Columns: []string{userotp.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserOtp{config: uouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userotp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
