// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aramen-api/cmd/api/ent/branches"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BranchesCreate is the builder for creating a Branches entity.
type BranchesCreate struct {
	config
	mutation *BranchesMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (bc *BranchesCreate) SetName(s string) *BranchesCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetShortDescription sets the "short_description" field.
func (bc *BranchesCreate) SetShortDescription(s string) *BranchesCreate {
	bc.mutation.SetShortDescription(s)
	return bc
}

// SetFullDescription sets the "full_description" field.
func (bc *BranchesCreate) SetFullDescription(s string) *BranchesCreate {
	bc.mutation.SetFullDescription(s)
	return bc
}

// SetTelephone sets the "telephone" field.
func (bc *BranchesCreate) SetTelephone(s string) *BranchesCreate {
	bc.mutation.SetTelephone(s)
	return bc
}

// SetLatitude sets the "latitude" field.
func (bc *BranchesCreate) SetLatitude(i int) *BranchesCreate {
	bc.mutation.SetLatitude(i)
	return bc
}

// SetLongitude sets the "longitude" field.
func (bc *BranchesCreate) SetLongitude(i int) *BranchesCreate {
	bc.mutation.SetLongitude(i)
	return bc
}

// SetGooleMapURL sets the "goole_map_url" field.
func (bc *BranchesCreate) SetGooleMapURL(s string) *BranchesCreate {
	bc.mutation.SetGooleMapURL(s)
	return bc
}

// SetDineIn sets the "dine_in" field.
func (bc *BranchesCreate) SetDineIn(b bool) *BranchesCreate {
	bc.mutation.SetDineIn(b)
	return bc
}

// SetDelivery sets the "delivery" field.
func (bc *BranchesCreate) SetDelivery(b bool) *BranchesCreate {
	bc.mutation.SetDelivery(b)
	return bc
}

// SetTakeAway sets the "take_away" field.
func (bc *BranchesCreate) SetTakeAway(b bool) *BranchesCreate {
	bc.mutation.SetTakeAway(b)
	return bc
}

// Mutation returns the BranchesMutation object of the builder.
func (bc *BranchesCreate) Mutation() *BranchesMutation {
	return bc.mutation
}

// Save creates the Branches in the database.
func (bc *BranchesCreate) Save(ctx context.Context) (*Branches, error) {
	var (
		err  error
		node *Branches
	)
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BranchesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			if node, err = bc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			if bc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Branches)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BranchesMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BranchesCreate) SaveX(ctx context.Context) *Branches {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BranchesCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BranchesCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BranchesCreate) check() error {
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Branches.name"`)}
	}
	if _, ok := bc.mutation.ShortDescription(); !ok {
		return &ValidationError{Name: "short_description", err: errors.New(`ent: missing required field "Branches.short_description"`)}
	}
	if _, ok := bc.mutation.FullDescription(); !ok {
		return &ValidationError{Name: "full_description", err: errors.New(`ent: missing required field "Branches.full_description"`)}
	}
	if _, ok := bc.mutation.Telephone(); !ok {
		return &ValidationError{Name: "telephone", err: errors.New(`ent: missing required field "Branches.telephone"`)}
	}
	if _, ok := bc.mutation.Latitude(); !ok {
		return &ValidationError{Name: "latitude", err: errors.New(`ent: missing required field "Branches.latitude"`)}
	}
	if _, ok := bc.mutation.Longitude(); !ok {
		return &ValidationError{Name: "longitude", err: errors.New(`ent: missing required field "Branches.longitude"`)}
	}
	if _, ok := bc.mutation.GooleMapURL(); !ok {
		return &ValidationError{Name: "goole_map_url", err: errors.New(`ent: missing required field "Branches.goole_map_url"`)}
	}
	if _, ok := bc.mutation.DineIn(); !ok {
		return &ValidationError{Name: "dine_in", err: errors.New(`ent: missing required field "Branches.dine_in"`)}
	}
	if _, ok := bc.mutation.Delivery(); !ok {
		return &ValidationError{Name: "delivery", err: errors.New(`ent: missing required field "Branches.delivery"`)}
	}
	if _, ok := bc.mutation.TakeAway(); !ok {
		return &ValidationError{Name: "take_away", err: errors.New(`ent: missing required field "Branches.take_away"`)}
	}
	return nil
}

func (bc *BranchesCreate) sqlSave(ctx context.Context) (*Branches, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (bc *BranchesCreate) createSpec() (*Branches, *sqlgraph.CreateSpec) {
	var (
		_node = &Branches{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: branches.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: branches.FieldID,
			},
		}
	)
	if value, ok := bc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: branches.FieldName,
		})
		_node.Name = value
	}
	if value, ok := bc.mutation.ShortDescription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: branches.FieldShortDescription,
		})
		_node.ShortDescription = value
	}
	if value, ok := bc.mutation.FullDescription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: branches.FieldFullDescription,
		})
		_node.FullDescription = value
	}
	if value, ok := bc.mutation.Telephone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: branches.FieldTelephone,
		})
		_node.Telephone = value
	}
	if value, ok := bc.mutation.Latitude(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: branches.FieldLatitude,
		})
		_node.Latitude = value
	}
	if value, ok := bc.mutation.Longitude(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: branches.FieldLongitude,
		})
		_node.Longitude = value
	}
	if value, ok := bc.mutation.GooleMapURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: branches.FieldGooleMapURL,
		})
		_node.GooleMapURL = value
	}
	if value, ok := bc.mutation.DineIn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: branches.FieldDineIn,
		})
		_node.DineIn = value
	}
	if value, ok := bc.mutation.Delivery(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: branches.FieldDelivery,
		})
		_node.Delivery = value
	}
	if value, ok := bc.mutation.TakeAway(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: branches.FieldTakeAway,
		})
		_node.TakeAway = value
	}
	return _node, _spec
}

// BranchesCreateBulk is the builder for creating many Branches entities in bulk.
type BranchesCreateBulk struct {
	config
	builders []*BranchesCreate
}

// Save creates the Branches entities in the database.
func (bcb *BranchesCreateBulk) Save(ctx context.Context) ([]*Branches, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Branches, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BranchesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BranchesCreateBulk) SaveX(ctx context.Context) []*Branches {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BranchesCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BranchesCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
