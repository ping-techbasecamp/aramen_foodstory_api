// Code generated by ent, DO NOT EDIT.

package userotp

import (
	"aramen-api/cmd/api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// Reference applies equality check predicate on the "reference" field. It's identical to ReferenceEQ.
func Reference(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReference), v))
	})
}

// HashedOtp applies equality check predicate on the "hashed_otp" field. It's identical to HashedOtpEQ.
func HashedOtp(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHashedOtp), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.UserOtp {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.UserOtp {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// ReferenceEQ applies the EQ predicate on the "reference" field.
func ReferenceEQ(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReference), v))
	})
}

// ReferenceNEQ applies the NEQ predicate on the "reference" field.
func ReferenceNEQ(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReference), v))
	})
}

// ReferenceIn applies the In predicate on the "reference" field.
func ReferenceIn(vs ...string) predicate.UserOtp {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReference), v...))
	})
}

// ReferenceNotIn applies the NotIn predicate on the "reference" field.
func ReferenceNotIn(vs ...string) predicate.UserOtp {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReference), v...))
	})
}

// ReferenceGT applies the GT predicate on the "reference" field.
func ReferenceGT(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReference), v))
	})
}

// ReferenceGTE applies the GTE predicate on the "reference" field.
func ReferenceGTE(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReference), v))
	})
}

// ReferenceLT applies the LT predicate on the "reference" field.
func ReferenceLT(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReference), v))
	})
}

// ReferenceLTE applies the LTE predicate on the "reference" field.
func ReferenceLTE(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReference), v))
	})
}

// ReferenceContains applies the Contains predicate on the "reference" field.
func ReferenceContains(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReference), v))
	})
}

// ReferenceHasPrefix applies the HasPrefix predicate on the "reference" field.
func ReferenceHasPrefix(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReference), v))
	})
}

// ReferenceHasSuffix applies the HasSuffix predicate on the "reference" field.
func ReferenceHasSuffix(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReference), v))
	})
}

// ReferenceEqualFold applies the EqualFold predicate on the "reference" field.
func ReferenceEqualFold(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReference), v))
	})
}

// ReferenceContainsFold applies the ContainsFold predicate on the "reference" field.
func ReferenceContainsFold(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReference), v))
	})
}

// HashedOtpEQ applies the EQ predicate on the "hashed_otp" field.
func HashedOtpEQ(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHashedOtp), v))
	})
}

// HashedOtpNEQ applies the NEQ predicate on the "hashed_otp" field.
func HashedOtpNEQ(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHashedOtp), v))
	})
}

// HashedOtpIn applies the In predicate on the "hashed_otp" field.
func HashedOtpIn(vs ...string) predicate.UserOtp {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHashedOtp), v...))
	})
}

// HashedOtpNotIn applies the NotIn predicate on the "hashed_otp" field.
func HashedOtpNotIn(vs ...string) predicate.UserOtp {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHashedOtp), v...))
	})
}

// HashedOtpGT applies the GT predicate on the "hashed_otp" field.
func HashedOtpGT(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHashedOtp), v))
	})
}

// HashedOtpGTE applies the GTE predicate on the "hashed_otp" field.
func HashedOtpGTE(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHashedOtp), v))
	})
}

// HashedOtpLT applies the LT predicate on the "hashed_otp" field.
func HashedOtpLT(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHashedOtp), v))
	})
}

// HashedOtpLTE applies the LTE predicate on the "hashed_otp" field.
func HashedOtpLTE(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHashedOtp), v))
	})
}

// HashedOtpContains applies the Contains predicate on the "hashed_otp" field.
func HashedOtpContains(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHashedOtp), v))
	})
}

// HashedOtpHasPrefix applies the HasPrefix predicate on the "hashed_otp" field.
func HashedOtpHasPrefix(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHashedOtp), v))
	})
}

// HashedOtpHasSuffix applies the HasSuffix predicate on the "hashed_otp" field.
func HashedOtpHasSuffix(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHashedOtp), v))
	})
}

// HashedOtpEqualFold applies the EqualFold predicate on the "hashed_otp" field.
func HashedOtpEqualFold(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHashedOtp), v))
	})
}

// HashedOtpContainsFold applies the ContainsFold predicate on the "hashed_otp" field.
func HashedOtpContainsFold(v string) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHashedOtp), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserOtp) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserOtp) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserOtp) predicate.UserOtp {
	return predicate.UserOtp(func(s *sql.Selector) {
		p(s.Not())
	})
}
